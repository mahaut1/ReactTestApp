name: Build and Test React Application

# Déclencheur du workflow : il s'exécute à chaque push ou pull request sur la branche `main`
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job principal : construction et tests de l'application
  build_test:
    runs-on: ubuntu-latest  # Utilisation d'un runner Ubuntu pour le job

    strategy:
      matrix:
        node-version: [20.x]  # Utilisation de Node.js version 20.x pour le job

    steps:
      # 1. Checkout du dépôt pour récupérer le code source
      - uses: actions/checkout@v4

      # 2. Installation de Node.js avec la version spécifiée dans la matrice
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      
      # 3. Installation des dépendances en utilisant npm ci
      - name: Install dependencies
        run: npm ci

      # 4. Exécution de la construction de l'application et des tests
      - name: Run tests
        run: |
          npm run build
          npm test

      # 5. Téléchargement des rapports de couverture de tests sur Codecov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./react_test_app/coverage/clover.xml

      # 6. Upload du build de l'application pour GitHub Pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: react_test_app/build

  # Job pour générer la documentation JSDoc
  generate_jsdoc:
    runs-on: ubuntu-latest  # Utilisation d'un runner Ubuntu pour ce job
    needs: build_test  # Ce job doit attendre la fin de `build_test` avant de commencer
    steps:
      # 1. Checkout du dépôt pour récupérer le code source
      - uses: actions/checkout@v4

      # 2. Installation de Node.js avec la version 20.x
      - name: Set up Node.js 20.x
        uses: actions/setup-node@v2
        with:
          node-version: 20.x

      # 3. Installation des dépendances
      - name: Install dependencies
        run: npm ci

      # 4. Génération de la documentation JSDoc
      - name: Generate JSDoc
        run: npm run jsdoc

      # 5. Upload de la documentation générée comme artefact
      - name: Upload JSDoc artifact
        uses: actions/upload-artifact@v4
        with:
          name: jsdoc
          path: public/docs/*  # Assurez-vous que le chemin de la documentation est correct
          if-no-files-found: error  # Échouer si aucun fichier n'est trouvé

  # Job pour déployer l'application sur GitHub Pages
  deploy:
    runs-on: ubuntu-latest  # Utilisation d'un runner Ubuntu pour ce job
    needs: build_test  # Ce job dépend de `build_test` pour être exécuté
    steps:
      # 1. Checkout du dépôt pour récupérer le code source
      - uses: actions/checkout@v4

      # 2. Déploiement sur GitHub Pages avec le dossier `build`
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          branch: gh-pages  # Déploiement sur la branche `gh-pages`
          folder: build  # Le dossier `build` doit être utilisé pour le déploiement
